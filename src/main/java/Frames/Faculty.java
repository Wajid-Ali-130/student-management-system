/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Frames;


import Bean.FacultyBean;
import DAO.FacultyDAO;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Tech Fever
 */
public class Faculty extends javax.swing.JFrame {


/**
     * Creates new form Usindh
     */
        public Faculty() {
        initComponents();
        getFaculty();
    }
    
    public void  getFaculty(){
        
        try{
            Vector<FacultyBean> list= FacultyDAO.getAllFaculty();
            facList.setListData(list);
        
        }catch(Exception e){
        e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        facNameTF = new javax.swing.JTextField();
        facIdTF = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        remarksTA = new javax.swing.JTextArea();
        updateButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        facList = new javax.swing.JList();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("U Sindh");
        setMaximumSize(new java.awt.Dimension(800, 800));
        setMinimumSize(new java.awt.Dimension(700, 700));
        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 0, 0));
        jLabel1.setText("Fac name");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(70, 110, 70, 40);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 0, 0));
        jLabel2.setText("Fac List");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(370, 20, 120, 40);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 0, 0));
        jLabel3.setText("Remarks");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(70, 170, 58, 20);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 51, 0));
        jLabel4.setText("FACULTY");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(200, 10, 140, 30);
        getContentPane().add(facNameTF);
        facNameTF.setBounds(140, 110, 220, 40);
        getContentPane().add(facIdTF);
        facIdTF.setBounds(140, 60, 220, 40);

        remarksTA.setColumns(20);
        remarksTA.setRows(5);
        jScrollPane1.setViewportView(remarksTA);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(140, 170, 220, 110);

        updateButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        updateButton.setForeground(new java.awt.Color(255, 0, 0));
        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });
        getContentPane().add(updateButton);
        updateButton.setBounds(180, 310, 72, 50);

        deleteButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        deleteButton.setForeground(new java.awt.Color(255, 0, 0));
        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        getContentPane().add(deleteButton);
        deleteButton.setBounds(260, 310, 72, 50);

        clearButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        clearButton.setForeground(new java.awt.Color(255, 0, 0));
        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });
        getContentPane().add(clearButton);
        clearButton.setBounds(350, 310, 72, 50);

        backButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        backButton.setForeground(new java.awt.Color(255, 0, 0));
        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        getContentPane().add(backButton);
        backButton.setBounds(440, 310, 72, 50);

        addButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        addButton.setForeground(new java.awt.Color(255, 0, 0));
        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        getContentPane().add(addButton);
        addButton.setBounds(90, 310, 72, 50);

        facList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                facListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(facList);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(370, 60, 140, 220);

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 0, 0));
        jLabel5.setText("Fac id");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(90, 60, 40, 40);

        setSize(new java.awt.Dimension(598, 500));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void facListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_facListValueChanged
        // TODO add your handling code here:
        // This check prevents the event from firing twice for a single selection change
    if (evt.getValueIsAdjusting()) {
        return;
    }

    // Get the selected FacultyBean object from the JList
    FacultyBean bean = (FacultyBean) facList.getSelectedValue();

    // If the selection is cleared (bean is null), do nothing.
    if (bean == null) {
        return;
    }

    // **FIXED:** Changed getFacId() to getFacultyId() and getFacName() to getFacultyName()
    facIdTF.setText(String.valueOf(bean.getFacultyId()));
    facNameTF.setText(bean.getFacultyName());
    remarksTA.setText(bean.getRemarks());
               
    }//GEN-LAST:event_facListValueChanged

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
        String facIdStr = facIdTF.getText();
        String facName = facNameTF.getText();
        String remarks = remarksTA.getText();

        if (facIdStr.isEmpty() || facName.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Faculty ID and Name are required.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            int facId = Integer.parseInt(facIdStr);
            FacultyBean bean = new FacultyBean(facId, facName, remarks);

            FacultyDAO facultyDAO = new FacultyDAO();

            if (facultyDAO.addFaculty(bean) > 0) {
                JOptionPane.showMessageDialog(this, "Faculty Added Successfully!");
                populateFacultyList(); // Refresh the list to show the new entry
                clearButtonActionPerformed(null); // Clear input fields
            } else {
                JOptionPane.showMessageDialog(this, "Failed to Add Faculty.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid Faculty ID. Please enter a number.", "Input Error", JOptionPane.ERROR_MESSAGE);
        }       catch (SQLException ex) {
                    Logger.getLogger(Faculty.class.getName()).log(Level.SEVERE, null, ex);
                }
                // Handle specific SQL errors, like a duplicate primary key
                // MySQL error code for duplicate entry
            
    }//GEN-LAST:event_addButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        // TODO add your handling code here:
        facIdTF.setText("");
        facNameTF.setText("");
        remarksTA.setText("");
    }//GEN-LAST:event_clearButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        // TODO add your handling code here:
        FacultyBean selectedBean = (FacultyBean) facList.getSelectedValue();
            if (selectedBean == null) {
                JOptionPane.showMessageDialog(this, "Please select a faculty from the list to update.", "Selection Error", JOptionPane.WARNING_MESSAGE);
                return;
            }

            try {
                String facName = facNameTF.getText();
                String remarks = remarksTA.getText();
                int facId = Integer.parseInt(facIdTF.getText()); // Get ID from the text field

                FacultyBean beanToUpdate = new FacultyBean(facId, facName, remarks);
                
                FacultyDAO facultyDAO = new FacultyDAO();

                if (facultyDAO.updateFaculty(beanToUpdate) > 0) {
                    JOptionPane.showMessageDialog(this, "Faculty Updated Successfully!");
                    populateFacultyList();
                    clearButtonActionPerformed(null);
                } else {
                    JOptionPane.showMessageDialog(this, "Failed to update faculty. Record may not exist.", "Update Failed", JOptionPane.ERROR_MESSAGE);
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Invalid Faculty ID.", "Input Error", JOptionPane.ERROR_MESSAGE);
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Database Error during update: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
    }//GEN-LAST:event_updateButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
         FacultyBean selectedBean = (FacultyBean) facList.getSelectedValue();
        if (selectedBean == null) {
            JOptionPane.showMessageDialog(this, "Please select a faculty from the list to delete.", "Selection Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int choice = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete '" + selectedBean.getFacultyName() + "'?", "Confirm Deletion", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

        if (choice == JOptionPane.YES_OPTION) {
            try {
                FacultyDAO facultyDAO = new FacultyDAO();
                if (facultyDAO.deleteFaculty(selectedBean.getFacultyId()) > 0) {
                    JOptionPane.showMessageDialog(this, "Faculty Deleted Successfully!");
                    populateFacultyList();
                    clearButtonActionPerformed(null);
                } else {
                    JOptionPane.showMessageDialog(this, "Failed to delete faculty.", "Deletion Failed", JOptionPane.ERROR_MESSAGE);
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Database Error during deletion: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        MainFrame ob=new MainFrame();
       ob.setVisible(true);
       this.dispose();
    }//GEN-LAST:event_backButtonActionPerformed

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton backButton;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTextField facIdTF;
    private javax.swing.JList facList;
    private javax.swing.JTextField facNameTF;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea remarksTA;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables

    private void populateFacultyList() {
         try {
            // Get all faculty members from the database
            java.util.Vector<FacultyBean> facultyVector = FacultyDAO.getAllFaculty();
            // Populate the JList with the vector of faculty beans
            facList.setListData(facultyVector);
        } catch (SQLException e) {
            javax.swing.JOptionPane.showMessageDialog(this, "Error loading faculty list: " + e.getMessage(), "Database Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            e.printStackTrace(); // Also print the stack trace for debugging
        }
    }
}
